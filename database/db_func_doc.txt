DOCUMENTATION for "db_func.py" (Database Functionality)
    -Edel Barcenas

DATABASE_1 INFO: 
    url : mysql://be3c5020bf5627:3bfc3cfa@us-cdbr-east-04.cleardb.com/heroku_f7729a769a3bca5?reconnect=true
    username : be3c5020bf5627
    password : 3bfc3cfa
    hostname : us-cdbr-east-04.cleardb.com
    database : heroku_f7729a769a3bca5
    
DATABASE_2 INFO:
    url : mysql://b600fe51c41038:f2ad2d79@us-cdbr-east-04.cleardb.com/heroku_3c9e97a749311b6?reconnect=true
    username : b600fe51c41038
    password : f2ad2d79
    hostname : us-cdbr-east-04.cleardb.com
    database : heroku_3c9e97a749311b6

?reconnect=true

    
ENTITIES & ATTRIBUTES:
    Comment:
        com_id: 
            unique integer assigned by database upon creation of a comment
            used to  identify comments
        sender:
            username of user who posted a comment
        post_id:
            post_id attribute of the post that the comment is under
            used to retrieve all comments from a specific post
        message:
            500 character string message
            (content of the comment)
        ctime: 
            comment time in datetime format
            year-month-day hour:minutes:seconds
            YYYY-MM-DD hh:mm:ss
            this is saved by the database upon creation

    Conversation:
        convo_id:
            unique integer assigned by database upon creation
            used to identify conversations
        user1:
            username of a user in the conversation
        user2:
            username of a user in the conversation
        new_message:
            1 if there is an unread message in the convo || 0 otherwise
            
    Message (Direct Message): 
        msg_id: 
            unique integer assigned by database upon creation of a Message
            used to  identify Messsages
        sender:
            username of user who sent message
        message: 
            500 character string
            (content of message)
        mtime: 
            direct message time in datetime format
            year-month-day hour:minutes:seconds
            YYYY-MM-DD hh:mm:ss
            this is saved by the database upon creation
        is_read:
            0 if message is unread
            1 if message is read
            
    Follow:
        follower:
            username of user doing the following
        target:
            username of user being followed
    
    Post: 
        post_id:
            unique integer assigned by database upon creation of a post
            used to identify posts
        poster:
            username of user who made the post
        song_title:
            30 char string title of song that is linked to in the post
        artist: 
            30 char string of artist that wrote the song that is linked to in post
        song_link:
            100 character string of hyperlink to song
        image:
            100 character string of hyperlink to an image
        caption:
            500 character string to be placed below post/at the top of comments section
        ptime:
            post time in datetime format
            year-month-day hour:minutes:seconds
            YYYY-MM-DD hh:mm:ss
            this is saved by the database upon creation
    
    User: 
        fname:
            20 char string first name of user
        lname:
            20 char string last name of user
        username:
            20 char unique string chosen by user
            used to uniquely identify users
        password:
            20 char string
        email:
            20 char string
        admin_status:
            0 | 1
            1: admin , 0: not admin
        block_status:
            0 | 1
            1: blocked , 0: not blocked
            database sets to 0 upon creation
    
    
PUBLIC FUNCTIONS (for use when db_func is imported):
    
    ADD METHODS
        
        addComment(string sender, int post_id, string message,):
            -post_id : the ID number of the post that the comment is under
            -message <500 chars 
            
        addConvo(string username1, string username2):
            -creates a conversation entity
            -convo_id is generated on creation
            -new_message is set to 0 by default
        
        addMessage(int convo_id, string sender, string receiver, string message):
            -convo_id references a conversation entity
            -message <500 chars
            
        addFollow( string follower, string target): 
            -creates a one way connection follower-->target != target-->follwer
            
        addPost(string poster, string song_title, string artist, string song_link, string image, string caption):
            -song_title & artist <20 chars
            -song_link <100 chars
            -image : hyperlink <100 chars
            -caption <500 chars
        
        addUser(string fname, string lname, string username, string password, string email, int isAdmin ):
            -all strings must be < 20 chars
            -isAdmin must be 1 | 0
            
    DELETE METHODS
        
        deleteComment(int com_id)
        
        deleteFollow(string follower, string target)
        
        deletePost(int post_id)
        
        deleteUser(string username)
        
    
    GETTER METHODS (organized by database entity) :
          
        Multiple Entity:
        
            getCreator( char entity, int id_number ):
                    -returns string username < 20 chars
                    -entity : ('p' : post), ('c' : comment), ('m' : message)
                    -id_number : post_id | com_id | msg_id , depending on entity  
            
            getText( char entity, int id_number ):
                -returns string < 500 char
                -entity : ('p' : post), ('c' : comment), ('m' : message)
                -id_number : post_id | com_id | msg_id , depending on entity
            
            getTimeCreated( char entity, int id_number ):
                -returns datetime.datetime() object that can be converted to string using str()
                -entity : ('p' : post), ('c' : comment), ('m' : message)
                -id_number : post_id | com_id | msg_id , depending on entity

        CONVERSATION:
            getConvoId(string user1, string user2):
                -returns convo_id of convo between those users
        
            getMessages(int convo_id):
                -returns array of message_id's
        
        MESSAGE: 
            
            
        POST: 
            getPostInfo(int post_id): 
                -returns tuple of all post information
                -tuple format: ( post_id, poster, song_title, artist, song_link, image_link, caption, ptime ) 
        
            getArtist(int post_id)
                returns string < 30 chars
            
            getComments(int post_id):
                -returns an array of com_id's ordered by time posted from 1st to last
                -com_id : comment id number : essential for referencing specific comments
            
            getImageLink(int post_id): 
                -returns string < 100 chars
            
            getSongLink(int post_id):   
                returns string < 100 chars
            
            getSongTitle(int post_id)
                returns string < 30 chars
                
        USER  ( all use getUserInfo() ): 
            getUserInfo(string username):
                -returns a tuple of all user information
                -return tuple format: ( first_name, last_name, username, password, email, admin_status, block_status )
                
            getFname(string username):
            
            getLname(string username):
            
            getPassword(string username):
            
            getEmail(string username):
            
            getAdminStatus(string username): 
                -returns 1 if username is an Admin | 0 if not
            
            getBlockStatus(string username):
                -returns 1 if username is blocked | 0 if not
                
            getFollowers(string username_arg):
                -returns an array of all the usernames users that follow username_arg
                
            getPosts(string username)
                -returns an array of post_id's ordered by time posted from 1st to last
                -post_id : post id number : essential for referencing specific posts
                
                
    SETTER METHODS ( all sets use __runQuery() ): 
      
        CONVERSATION: 
            setNewMessage(int convo_id, int bool_val):
                -sets the new_message attribute of conversation with convo_id to bool_val
                - 1 : there is a new message || 0 otherwise
        
        POST: 
        
        USER : 
            setAdminStatus(string username, int status):
                -status must be 0 | 1
            
            setBlockStatus(string username, int status):
                -status must be 0 | 1
            
            setEmail(string username, string new_email):
            
            setFname(string username, string new_fname):
            
            setLname(string username, string new_lname):
            
            setPassword(string username, string new_password):
            
            setUsername(string old_username, string new_username):
                -all strings must be < 20 chars
            
        MISC METHODS: 
            
            usernameTaken(string username):
                -returns 1 if username exists in database | 0 if not
            
            searchPosts(string search):
                -return array of post_id where (search == substring of song_title) | (search == substring of artist)
        
            searchUsers(string search):
                -returns array of usernames where search == substring username
                
            
        
PRIVATE FUNCTIONS (not for import usage): 

    __connector(): 
        -task : establishes connection to database and can be used to initializes cursor with
                db_con = __connector()
                myCursor = db_con.cursor()
        db_con & myCursor should be closed when finished being used
    
    __sqlFileToCommands(file_name):
        -task : take in a SQL file, break it into an array of individual SQL commands without comments
        returns an array of SQL commands
    
    __initDB():
        -task : resets the database. Wipes all table data and re-initializes all tables
        -uses sqlFileToCommands()
        
    getPostInfo(int post_id): 
        -returns tuple of all post information
        -tuple format: ( post_id, poster, song_title, artist, song_link, image_link, caption, ptime ) 
    
    __getUserInfo(string username):
        -returns a tuple of all user information
        -return tuple format: ( first_name, last_name, username, password, email, admin_status, block_status )
            
    __queryCommit(string query , tuple data):
        -connects to database to then run SQL query then commit changes
        -returns nothing
        -used to update the database
        
    __queryTuple(string query , tuple data):
        -connects to database to then run SQL query
        -returns single tuple

    __queryArray(string query , tuple data):
        -connects to database to then run SQL query
        -returns array of tuples
    


